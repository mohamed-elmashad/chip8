#ifndef MEMORY_H
#define MEMORY_H


#include <cstdint>

class Memory {
public:
    Memory();
    uint8_t Read(uint16_t address);
    void Write(uint16_t address, uint8_t data);
    void WriteBlock(uint16_t address, uint8_t* data, uint16_t length);
    uint16_t getProgramCounter();
    void setProgramCounter(uint16_t pc);
    void pushStack(uint16_t value);
    uint16_t popStack();

private:
    // Declare memory array of 4 kb
    uint8_t memory[4096];
    // Declare program counter (PC) which can only address 12 bits, so we use uint16_t. Start at 0x200 because the first 512 bytes are reserved for the interpreter.
    uint16_t pc = 0x200;

    // Declare stack array of 16 16-bit values
    uint16_t stack[16];
    // Declare stack pointer (SP) which can only address 4 bits, so we use uint8_t
    uint8_t sp = 0;

    // Declare font set array of 80 bytes
    uint8_t font[80] = {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };
};

#endif
